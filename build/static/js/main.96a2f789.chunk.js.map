{"version":3,"sources":["utils.ts","components/Line.tsx","components/UserCursor.tsx","components/UserToken.tsx","App.tsx","hooks/useKeyboardEvents.ts","Three.tsx","index.tsx"],"names":["USER_COLORS","connectionIdToColor","id","length","Line","React","points","isComplete","color","pathData","stroke","d","reduce","acc","i","arr","x0","y0","x1","y1","push","join","getSvgPathFromStroke","getStroke","size","thinning","streamline","smoothing","last","fill","className","UserCursor","cursor","connectionId","isActive","cx","x","cy","y","r","UserToken","user","isSelf","index","strokeWidth","date","Date","setUTCHours","getTime","getPoint","App","lines","useList","Whiteboard","others","useOthers","self","useSelf","useMyPresence","presence","updateMyPresence","undo","useUndo","redo","useRedo","batch","useBatch","handleKeyDown","e","key","ctrlKey","metaKey","shiftKey","document","body","addEventListener","removeEventListener","useKeyboardEvents","clearAllLines","delete","handlePointerDown","currentTarget","setPointerCapture","pointerId","clientX","clientY","handlePointerMove","point","hasPointerCapture","handlePointerUp","releasePointerCapture","now","toString","s","forceUpdate","timeout","setInterval","clearInterval","onPointerDown","onPointerMove","onPointerUp","onPointerEnter","onPointerLeave","transform","map","line","other","toArray","onClick","href","target","client","createClient","publicApiKey","rootElement","getElementById","render"],"mappings":"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","file":"static/js/main.96a2f789.chunk.js","sourcesContent":["export function getSvgPathFromStroke(stroke: number[][]) {\n  if (!stroke.length) return \"\";\n\n  const d = stroke.reduce(\n    (acc, [x0, y0], i, arr) => {\n      const [x1, y1] = arr[(i + 1) % arr.length];\n      acc.push(x0, y0, (x0 + x1) / 2, (y0 + y1) / 2);\n      return acc;\n    },\n    [\"M\", ...stroke[0], \"Q\"]\n  );\n\n  d.push(\"Z\");\n  return d.join(\" \");\n}\n\nexport function toPairs<T>(arr: T[]): T[][] {\n  let pairs: T[][] = [];\n\n  for (let i = 0; i < arr.length - 1; i += 2) {\n    pairs.push([arr[i], arr[i + 1]]);\n  }\n\n  return pairs;\n}\n\nconst USER_COLORS = [\n  \"#EC5E41\",\n  \"#F2555A\",\n  \"#F04F88\",\n  \"#E34BA9\",\n  \"#BD54C6\",\n  \"#9D5BD2\",\n  \"#7B66DC\",\n  \"#5373E6\",\n  \"#369EFF\",\n  \"#02B1CC\",\n  \"#11B3A3\",\n  \"#39B178\",\n  \"#55B467\",\n  \"#FF802B\",\n];\n\nexport function connectionIdToColor(id: number) {\n  return USER_COLORS[id % USER_COLORS.length];\n}\n","import * as React from \"react\";\nimport { getStroke } from \"perfect-freehand\";\nimport { getSvgPathFromStroke } from \"../utils\";\n\nexport interface LineProps {\n  points: number[][];\n  isComplete: boolean;\n  color: string;\n}\n\nexport const Line = React.memo(function Line({\n  points,\n  isComplete,\n  color,\n}: LineProps) {\n  const pathData = getSvgPathFromStroke(\n    getStroke(points, {\n      size: 12,\n      thinning: 0.5,\n      streamline: 0.6,\n      smoothing: 0.7,\n      last: isComplete,\n    })\n  );\n\n  return (\n    <g fill={color}>\n      <path\n        className=\"canvas-line\"\n        d={pathData}\n        fill={isComplete ? \"black\" : color}\n      />\n    </g>\n  );\n});\n","import * as React from \"react\";\nimport { User } from \"../types\";\nimport { connectionIdToColor } from \"../utils\";\n\nexport interface UserCursorProps {\n  cursor: { x: number; y: number };\n  connectionId: number;\n  isActive: boolean;\n}\n\nexport const UserCursor = React.memo(\n  ({ cursor, connectionId, isActive }: UserCursorProps) => {\n    return (\n      <>\n      <circle\n        cx={cursor.x}\n        cy={cursor.y}\n        r={4}\n        fill={isActive ? connectionIdToColor(connectionId) : \"grey\"}\n      />\n      </>\n    );\n  }\n);","import * as React from \"react\";\nimport { User } from \"../types\";\nimport { connectionIdToColor } from \"../utils\";\n\nexport interface UserTokenProps {\n  connectionId: number;\n  user: User;\n  isSelf: boolean;\n  index: number;\n}\n\nexport const UserToken = React.memo(\n  ({ connectionId, user, isSelf, index }: UserTokenProps) => {\n    return (\n      <>\n        <circle\n          key={connectionId + \"_token\"}\n          cx={32 + 16 * index}\n          cy={32}\n          r={16}\n          strokeWidth={2}\n          stroke=\"white\"\n          fill={user.isActive ? connectionIdToColor(connectionId) : \"grey\"}\n        />\n        {isSelf && (\n          <circle\n            cx={32 + 16 * index}\n            cy={56}\n            r={4}\n            fill={connectionIdToColor(connectionId)}\n          />\n        )}\n      </>\n    );\n  }\n);\n","import * as React from \"react\";\nimport {\n  useList,\n  useMyPresence,\n  useOthers,\n  useRedo,\n  useSelf,\n  useUndo,\n  useBatch,\n} from \"@liveblocks/react\";\nimport \"./styles.css\";\nimport { LiveList } from \"@liveblocks/client\";\nimport { Line } from \"./components/Line\";\nimport { UserCursor } from \"./components/UserCursor\";\nimport { User } from \"./types\";\nimport { UserToken } from \"./components/UserToken\";\nimport { useKeyboardEvents } from \"./hooks/useKeyboardEvents\";\nimport { connectionIdToColor } from \"./utils\";\nimport { Canvas } from \"react-three-fiber\";\n\n// The scroll's y offset is based on the number of milliseconds\n// since 12:00AM today.\nconst date = new Date();\n\ndate.setUTCHours(0, 0, 0, 0);\n\nconst START_TIME = date.getTime();\n\nfunction getYOffset() {\n  return 0; //(Date.now() - START_TIME) / 80;\n}\n\nfunction getPoint(x: number, y: number) {\n  return [x, y + getYOffset()];\n}\n\ntype Line = {\n  id: string;\n  points: number[][];\n};\n\nexport default function App() {\n  const lines = useList<Line>(\"lines\");\n\n  if (lines == null) {\n    return <div>Loading</div>;\n  }\n\n  return <Whiteboard lines={lines} />;\n}\n\nfunction Whiteboard({ lines }: { lines: LiveList<Line> }) {\n  const others = useOthers<User>();\n  const self = useSelf<User>();\n  const [presence, updateMyPresence] = useMyPresence<User>();\n\n  const undo = useUndo();\n  const redo = useRedo();\n  const batch = useBatch();\n\n  useKeyboardEvents();\n\n  const clearAllLines = React.useCallback(() => {\n    batch(() => {\n      // Ugly but LiveList.clear is coming soon!\n      while (lines.length > 0) {\n        lines.delete(0);\n      }\n    });\n  }, [lines]);\n\n  // On pointer down, start a new current line\n  const handlePointerDown = React.useCallback(\n    (e: React.PointerEvent<SVGSVGElement>) => {\n      e.currentTarget.setPointerCapture(e.pointerId);\n\n      updateMyPresence({ points: [getPoint(e.clientX, e.clientY)] });\n    },\n    [presence, updateMyPresence]\n  );\n\n  // On pointer move, update awareness and (if down) update the current line\n  const handlePointerMove = React.useCallback(\n    (e: React.PointerEvent<SVGSVGElement>) => {\n      const point = getPoint(e.clientX, e.clientY);\n\n      if (e.currentTarget.hasPointerCapture(e.pointerId)) {\n        updateMyPresence({ points: [...presence.points!, point] });\n      }\n\n      updateMyPresence({\n        cursor: { x: point[0], y: point[1] },\n      });\n    },\n    [presence, updateMyPresence]\n  );\n\n  // On pointer up, complete the current line\n  const handlePointerUp = React.useCallback(\n    (e: React.PointerEvent<SVGSVGElement>) => {\n      e.currentTarget.releasePointerCapture(e.pointerId);\n\n      lines.push({ id: Date.now().toString(), points: presence.points! });\n\n      updateMyPresence({ points: [] });\n    },\n    [lines, updateMyPresence, presence]\n  );\n\n  const [_, forceUpdate] = React.useReducer((s) => !s, false);\n\n  React.useEffect(() => {\n    const timeout = setInterval(forceUpdate, 30);\n    return () => clearInterval(timeout);\n  }, []);\n\n  return (\n    <div className=\"canvas-container\">\n      <svg\n        className=\"canvas-layer\"\n        onPointerDown={handlePointerDown}\n        onPointerMove={handlePointerMove}\n        onPointerUp={handlePointerUp}\n        onPointerEnter={() => updateMyPresence({ isActive: true })}\n        onPointerLeave={() =>\n          updateMyPresence({ isActive: false, cursor: null })\n        }\n      >\n        <g transform={`translate(0, -${getYOffset()})`}>\n          {self && presence.points && presence.points.length > 2 && (\n            <Line\n              key=\"draft\"\n              points={presence.points}\n              color={connectionIdToColor(self.connectionId)}\n              isComplete={false}\n            />\n          )}\n          {lines.map((line) => (\n            <Line\n              key={line.id}\n              points={line.points}\n              isComplete={true}\n              color=\"black\"\n            />\n          ))}\n          {/* Lines drafts */}\n          {others.map((other) => {\n            if (\n              other.presence?.points == null ||\n              other.presence.points.length < 2\n            ) {\n              return null;\n            }\n\n            return (\n              <Line\n                key={\"draft_\" + other.connectionId}\n                points={other.presence.points}\n                isComplete={false}\n                color={connectionIdToColor(other.connectionId)}\n              />\n            );\n          })}\n          {/* Live Cursors */}\n          {others.map((other) => {\n            if (other.presence == null || other.presence.cursor == null) {\n              return null;\n            }\n\n            return (\n              <UserCursor\n                key={other.connectionId}\n                cursor={other.presence.cursor}\n                isActive={true}\n                connectionId={other.connectionId}\n              />\n            );\n          })}\n        </g>\n        {/* User Tokens */}\n        {others.toArray().map((other, i) => {\n          if (other.presence == null) {\n            return null;\n          }\n\n          return (\n            <UserToken\n              key={other.connectionId}\n              connectionId={other.connectionId}\n              user={other.presence}\n              index={i + 1}\n              isSelf={false}\n            />\n          );\n        })}\n        {self && (\n          <UserToken\n            key={self?.connectionId}\n            connectionId={self?.connectionId}\n            user={presence}\n            index={0}\n            isSelf={true}\n          />\n        )}\n      </svg>\n      <div className=\"canvas-controls\">\n        <button onClick={undo}>Undo</button>\n        <button onClick={redo}>Redo</button>\n        <button onClick={clearAllLines}>Clear</button>\n      </div>\n      <div className=\"author\">\n        by Kish Parikh - using Typescript, React, and <a href=\"https://liveblocks.io\" target=\"_blank\">LiveBlocks</a>\n      </div>\n    </div>\n  );\n}","import { useRedo, useUndo } from \"@liveblocks/react\";\nimport * as React from \"react\";\n\nexport function useKeyboardEvents() {\n  const undo = useUndo();\n  const redo = useRedo();\n\n  React.useEffect(() => {\n    function handleKeyDown(e: KeyboardEvent) {\n      switch (e.key) {\n        case \"z\": {\n          if (e.ctrlKey || e.metaKey) {\n            if (e.shiftKey) {\n              redo();\n            } else {\n              undo();\n            }\n            break;\n          }\n        }\n      }\n    }\n\n    document.body.addEventListener(\"keydown\", handleKeyDown);\n\n    return () => {\n      document.body.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [undo, redo]);\n}\n","import React, { Suspense, useRef } from \"react\";\nimport { Canvas, useFrame, useThree} from \"react-three-fiber\";\nimport { Stats } from \"@react-three/drei\";\nimport * as three from \"three\";\nimport { OrbitControls } from \"@react-three/drei\";\n\nimport \"./styles.css\";\n\nfunction Dodecahedron() {\n    const { viewport } = useThree()\n    // viewport = canvas in 3d units (meters)\n  \n    const dodecahedron = useRef<three.Mesh>();\n    useFrame(({ mouse }) => {\n      const x = (mouse.x * viewport.width) / 2\n      const z = ((mouse.y * viewport.height) / 2)\n      dodecahedron.current!.position.set(x, 0, -z)\n      dodecahedron.current!.rotation.set(-z, x, 0)\n    })\n  \n    return (\n      <mesh ref={dodecahedron} castShadow>\n        <dodecahedronBufferGeometry attach=\"geometry\" />\n        <meshNormalMaterial attach=\"material\" />\n      </mesh>\n    )\n  }\n  \nconst Sphere = () => {\n    const { viewport } = useThree()\n  const sphere = useRef<three.Mesh>();\n\n  useFrame(({ mouse }) => {\n\n    const x = (mouse.x * viewport.width) / 2\n    const z = ((mouse.y * viewport.height) / 2)\n    sphere.current!.rotation.x += 0.01;\n    sphere.current!.rotation.y += 0.01;\n    sphere.current!.position.set(-x, 0, z);\n\n    // sphere.current!.position.z += mouse;\n  });\n\n  return (\n    <mesh ref={sphere}>\n      <sphereBufferGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color=\"#0391BA\" />\n    </mesh>\n  );\n};\n\nconst Scene = () => {\n  return (\n    <>\n      <gridHelper />\n      <axesHelper />\n      <pointLight intensity={1.0} position={[5, 3, 5]} />\n      <Sphere />\n      <Dodecahedron />\n    </>\n  );\n};\n\nconst Three = () => {\n  return (\n    <div\n      style={{\n        height: \"100vh\",\n        width: \"100vw\",\n      }}\n    >\n      <Canvas\n        // concurrent\n        camera={{\n          near: 0.1,\n          far: 1000,\n          zoom: 1,\n        }}\n        onCreated={({ gl }) => {\n          gl.setClearColor(\"#252934\");\n        }}\n      >\n        <Stats />\n        <OrbitControls />\n        <Suspense fallback={null}>\n          <Scene />\n        </Suspense>\n      </Canvas>\n    </div>\n  );\n};\n\nexport default Three;\n","import { render } from \"react-dom\";\nimport { LiveblocksProvider, RoomProvider } from \"@liveblocks/react\";\n\nimport App from \"./App\";\nimport Three from \"./Three\";\n\nimport { createClient } from \"@liveblocks/client\";\n\nconst client = createClient({\n  publicApiKey: \"pk_live_wFCGkcqXzANe-yuJQvmhqQZd\",\n});\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <LiveblocksProvider client={client}>\n    <RoomProvider id=\"Monso\">\n      {\n        true ?\n        <App />\n        :\n        <Three />\n      }\n      \n    </RoomProvider>\n  </LiveblocksProvider>,\n  rootElement\n);\n"],"sourceRoot":""}